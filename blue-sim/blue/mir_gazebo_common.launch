<?xml version="1.0" ?>
<launch>
  <arg name="robot_x"   default="0.0" />
  <arg name="robot_y"   default="0.0" />
  <arg name="robot_yaw" default="0.0" />
  <arg name="prefix"    value="" />   <!-- this has to be "value", not "default", otherwise subst_value doesn't work -->

  <!-- Load URDF -->
  <include file="$(find mir_description)/launch/upload_mir_urdf.launch" />

  <!-- Spawn the robot into Gazebo -->
  <!--
  <node name="spawn_blue_urdf" pkg="gazebo_ros" type="spawn_model" args="-param /blue/robot_description -urdf -model mir
    -x $(arg robot_x) -y $(arg robot_y) -Y $(arg robot_yaw) " />
  -->

  <!-- Load ros_control controller configurations -->
  <!--
  <rosparam file="$(find mir_description)/config/joint_state_controller.yaml" command="load" />
  <rosparam file="$(find mir_description)/config/diffdrive_controller.yaml" command="load" subst_value="true" />
  -->

  <!-- Start the controllers -->
  <!--
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
    args="joint_state_controller mobile_base_controller"/>
  -->

  <!-- EKF -->
  <include file="$(find mir_gazebo)/launch/includes/ekf.launch.xml"/>

  <!-- Robot state publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" />

  <!-- Load teleop -->
  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
    <param name="default_topic" value="/blue/mobile_base_controller/cmd_vel"/>
    <param name="default_vx_max" value="1.0" />
    <param name="default_vx_min" value="-1.0" />
    <param name="default_vw_max" value="1.5" />
    <param name="default_vw_min" value="-1.5" />
  </node>

  <!-- create combined scan topic (like on real MiR) -->
  <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
  <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>

  <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="b_scan" />
    <remap from="scan_filtered" to="b_scan_rep117" />
  </node>

  <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="f_scan" />
    <remap from="scan_filtered" to="f_scan_rep117" />
  </node>

    <!-- Realsense camera args and topics -->
  <!-- See name assigned in realsense-RS200.macro.xacro -->
  <arg name="camera_name" default="r200" />

  <arg name="rgb_camera_info" value="/$(arg camera_name)/camera/color/camera_info"/>
  <arg name="rgb_img_rect" value="/$(arg camera_name)/camera/color/image_raw"/>  <!--Rectified color image-->
  <arg name="depReg_imgraw" value="/$(arg camera_name)/camera/depth/image_raw"/>  <!--Raw depth image-->
  <arg name="depReg_imgrect" value="/$(arg camera_name)/camera/depth/image_rect"/>  <!--Raw depth image-->
  <arg name="out_cloud" value="/$(arg camera_name)/camera/depth_registered/points"/>

  <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="screen"/>

  <!-- Convert depth from mm (in uint16) to meters -->
  <node pkg="nodelet" type="nodelet" name="convert_metric" args="load depth_image_proc/convert_metric standalone_nodelet">
    <remap from="image_raw" to="$(arg depReg_imgraw)"/>
    <remap from="image" to="$(arg depReg_imgrect)"/>
  </node>

  <!-- Construct point cloud of the rgb and depth topics -->
  <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
    <remap from="rgb/camera_info" to="$(arg rgb_camera_info)" />
    <remap from="rgb/image_rect_color" to="$(arg rgb_img_rect)"/>
    <remap from="depth_registered/image_rect" to="$(arg depReg_imgrect)"/>
    <remap from="depth_registered/points" to="$(arg out_cloud)"/>
  </node>
</launch>
